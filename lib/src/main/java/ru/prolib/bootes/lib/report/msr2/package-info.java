/**
 * Market Speculation Realtime report - Графическое представления спекуляций на графике цены.
 * <p>
 * Каждая операция представляется группой информационных блоков, каждый из которых содержит
 * значимую информацию об операции. Например, цена открытия, цена тейк-профита и стоп-лосса,
 * финансовый результат. Схематически, отчет можно представить следующим образом
 * <pre>
 * 
 *                            --------- 105
 *                            |
 *             -----------    |
 *             | block 1 | ----
 *             -----------
 *             | block 2 | ----
 *             -----------    |
 *         ----| block 3 |    |
 *         |   -----------    |
 *   98 ----                  |
 *                            --------- 95
 * 
 * </pre>
 * Где 95, 98 и 105 - это соответствующие ценовые уровни и моменты на графике
 * цены. 
 * <p>
 * Блоки (blocks) предназначены для отображения отдельных характеристик операции
 * в наиболее лаконичном и удобном для восприятия виде. Каждый блок
 * характеризуется ценой и временем. Эти атрибуты используются для формирования
 * связей с графиком цены. Например, для блока отображающего среднюю цену
 * открытия цена указывает непосредственно на цену открытия, а время - на время
 * начала операции. В процессе отображения эти значения будут использованы для
 * отрисовки коннектора соединяющего область блока в рамках отчета и
 * соответствующую точку на графике.
 * <p>
 * Цена и время не являются обязательными для блока. Если не указана цена, то
 * коннектор не отображается и блок является чисто информационным (например,
 * пиктограммы состояния фильтров в момент открытия). Если указана цена, но не
 * указано время, то считается, что данное событие еще не завершено и вместа
 * коннектора в конкретной точке на графике будет отображен ценовой уровень в
 * виде линии, по графику направленной в будущее (например цена стоп-лосс). Цена
 * блока так же используется для сортировки блоков (для оптимального
 * распределения коннекторов). Блоки не имеющие цены сортируются между собой по
 * хэш-коду и помещаются в конец отчета.
 * <p>
 * В рамках отчета каждый блок имеет уникальный строковый идентификатор типа.
 * Идентификатор типа позволяет выполнять замену содержимого блоков а так же
 * связывать данные блоков с рендерерами.
 * <p>
 * В процессе отображения все блоки группируются в единой области, которая и
 * представляет собой отчет. Для получения доступа к отчетам по всем
 * зарегистрированным спекуляциям используется специальное хранилище. Хранилище
 * оптимизировано для хранения и доступа к данным с учетом специфики отображения
 * - графика цены, где одна из осей представляет собой время. Хранилище
 * позволяет получать список отчетов, попадающих в указанный диапазон времени.
 * <p>
 * <b>Размещение на графике</b>
 * <p>
 * Входящие в отчет блоки группируются в единую прямоугольную область. Если для
 * блока задана цена и время, то от блока отходит коннектор, который соединяет
 * блок и соответствующую точку на графике. При необходимости, коннекторы
 * изгибаются под углом 90 градусов. Поскольку от отчета может отходить несколько
 * коннекторов, что бы изображения коннекторов не перекрывались, между ними
 * резервируется пространство. Таким образом, общая минимальная ширина отчета
 * равна максимальной ширине блока плюс (w + s) * n где w - ширина коннектора,
 * s - расстояние между соседними коннекторами, n - количество отображаемых
 * коннекторов. 
 * <p>
 * Зная ширину области отображения отчета с выходами коннекторов, можно определить
 * горизонтальную позицию отчета. Прежде всего, необходимо определить пару смежных
 * блоков. Это блоки с ненулевыми временем и ценой, которые указывают на максимально
 * разнесенные друг от друга точки на графике, но между которыми нет других блоков
 * (то есть, сортируем по времени и ищем пару смежных). Между этими блоками должно
 * быть расстояние, достаточное для отображения отчета с выходами коннекторов. Если
 * такой пары блоков не найдено, то отчет может быть размещен либо левее самого
 * раннего блока, либо правее самого позднего. Здесь уже проверяется наличие
 * пространства соответственно от левого края графика до раннего блока и от позднего
 * блока до правого края графика. Если на графике недостаточно места для отчета, то
 * отчет не отображается.
 * <p>
 * После определения позиции отчета по горизонтали, можно определить позицию по
 * вертикали. Оптимальное размещение такое, при котором тело отчета не перекроет
 * какой либо из ценовых уровней, на который ссылается один из блоков отчета.
 * То есть, это выше блока с максимальной ценой или ниже блока с минимальной ценой.
 * Если в этих областях есть достаточно места, то отчет отображается по середине
 * той области, которая больше по высоте. Если отобразить отчет выше или ниже
 * ценовых уровеней невозможно, то отчет смещается внутрь области ценовых уровней.
 * Наиболее оптимальным местом в данном случае является такое, при котором
 * перекрывается минимальное количество задействованных ценовых уровней (в целях
 * упрощения в начальной версии берем середину нижнй и верхней половин графика в
 * качестве позиций для отображения, подсчитываем количество перекрывающихся
 * уровней и выбираем ту, для которой количество перекрытий меньше.
 * <p>
 * TODO:
 * Функции стораджа - очистить ранние отчеты до указанного времени
 * При создании отчета первая запись - открывающая, обязательно со временем (и ценой?)
 * Отчет должен отображаться всегда. Три вида отчета в зависимости от доступного места.
 * 1) в самом худшем случае отображается маленькая пиктограмма, обозначая, что там была спекуляция
 * (со стрелкой вверх или вниз?)
 * 2) средний вариант - есть место для коннекторов и пиктограммы, но нет места для отчета.
 * В этом случае отображается пиктограмма от которой отходят коннекторы к соответствующим
 * точкам на графике.
 * 3) лучший вариант - есть место для полноценного отчета с отображением всех блоков
 * В этом случае отображаются все блоки и отходящие от них коннекторы 
 */
package ru.prolib.bootes.lib.report.msr2;
